/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * gift-sync-back-end
 * OpenAPI spec version: 1.0.0
 */
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'
import type { BodyType, ErrorType } from '../customInstance'
import { customInstance } from '../customInstance'
import {
    ErrorResponseApiDTO,
    PostUserInformationsRequestApiDTO,
    RegisterUserRequestApiDTO,
    UserClassGetResponseApiDTO,
} from './Api.schemas'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const getRoomOfAUser = (
    userId: string,
    options?: SecondParameter<typeof customInstance>,
    signal?: AbortSignal
) => {
    return customInstance<unknown>(
        { url: `/user/${userId}/rooms`, method: 'GET', signal },
        options
    )
}

export const getGetRoomOfAUserQueryKey = (userId: string) => {
    return [`/user/${userId}/rooms`] as const
}

export const getGetRoomOfAUserQueryOptions = <
    TData = Awaited<ReturnType<typeof getRoomOfAUser>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(
    userId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRoomOfAUser>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    }
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetRoomOfAUserQueryKey(userId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getRoomOfAUser>>
    > = ({ signal }) => getRoomOfAUser(userId, requestOptions, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!userId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getRoomOfAUser>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetRoomOfAUserQueryResult = NonNullable<
    Awaited<ReturnType<typeof getRoomOfAUser>>
>
export type GetRoomOfAUserQueryError = ErrorType<ErrorResponseApiDTO>

export function useGetRoomOfAUser<
    TData = Awaited<ReturnType<typeof getRoomOfAUser>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(
    userId: string,
    options: {
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRoomOfAUser>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getRoomOfAUser>>,
                    TError,
                    TData
                >,
                'initialData'
            >
        request?: SecondParameter<typeof customInstance>
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetRoomOfAUser<
    TData = Awaited<ReturnType<typeof getRoomOfAUser>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(
    userId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRoomOfAUser>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getRoomOfAUser>>,
                    TError,
                    TData
                >,
                'initialData'
            >
        request?: SecondParameter<typeof customInstance>
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetRoomOfAUser<
    TData = Awaited<ReturnType<typeof getRoomOfAUser>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(
    userId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRoomOfAUser>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetRoomOfAUser<
    TData = Awaited<ReturnType<typeof getRoomOfAUser>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(
    userId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRoomOfAUser>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetRoomOfAUserQueryOptions(userId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

export const getUserById = (
    userId: string,
    options?: SecondParameter<typeof customInstance>,
    signal?: AbortSignal
) => {
    return customInstance<UserClassGetResponseApiDTO>(
        { url: `/user/${userId}`, method: 'GET', signal },
        options
    )
}

export const getGetUserByIdQueryKey = (userId: string) => {
    return [`/user/${userId}`] as const
}

export const getGetUserByIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getUserById>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(
    userId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getUserById>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    }
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetUserByIdQueryKey(userId)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserById>>> = ({
        signal,
    }) => getUserById(userId, requestOptions, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!userId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getUserById>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetUserByIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getUserById>>
>
export type GetUserByIdQueryError = ErrorType<ErrorResponseApiDTO>

export function useGetUserById<
    TData = Awaited<ReturnType<typeof getUserById>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(
    userId: string,
    options: {
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getUserById>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getUserById>>,
                    TError,
                    TData
                >,
                'initialData'
            >
        request?: SecondParameter<typeof customInstance>
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetUserById<
    TData = Awaited<ReturnType<typeof getUserById>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(
    userId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getUserById>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getUserById>>,
                    TError,
                    TData
                >,
                'initialData'
            >
        request?: SecondParameter<typeof customInstance>
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetUserById<
    TData = Awaited<ReturnType<typeof getUserById>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(
    userId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getUserById>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetUserById<
    TData = Awaited<ReturnType<typeof getUserById>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(
    userId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getUserById>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetUserByIdQueryOptions(userId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

export const postUserInformations = (
    userId: string,
    registerUserRequestApiDTO: BodyType<PostUserInformationsRequestApiDTO>,
    options?: SecondParameter<typeof customInstance>
) => {
    return customInstance<UserClassGetResponseApiDTO>(
        {
            url: `/user/${userId}`,
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            data: registerUserRequestApiDTO,
        },
        options
    )
}

export const getPostUserInformationsMutationOptions = <
    TError = ErrorType<ErrorResponseApiDTO>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postUserInformations>>,
        TError,
        { userId: string; data: BodyType<PostUserInformationsRequestApiDTO> },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
    Awaited<ReturnType<typeof postUserInformations>>,
    TError,
    { userId: string; data: BodyType<PostUserInformationsRequestApiDTO> },
    TContext
> => {
    const { mutation: mutationOptions, request: requestOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postUserInformations>>,
        { userId: string; data: BodyType<PostUserInformationsRequestApiDTO> }
    > = (props) => {
        const { userId, data } = props ?? {}

        return postUserInformations(userId, data, requestOptions)
    }

    return { mutationFn, ...mutationOptions }
}

export type PostUserInformationsMutationResult = NonNullable<
    Awaited<ReturnType<typeof postUserInformations>>
>
export type PostUserInformationsMutationBody =
    BodyType<RegisterUserRequestApiDTO>
export type PostUserInformationsMutationError = ErrorType<ErrorResponseApiDTO>

export const usePostUserInformations = <
    TError = ErrorType<ErrorResponseApiDTO>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postUserInformations>>,
        TError,
        { userId: string; data: BodyType<PostUserInformationsRequestApiDTO> },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
    Awaited<ReturnType<typeof postUserInformations>>,
    TError,
    { userId: string; data: BodyType<PostUserInformationsRequestApiDTO> },
    TContext
> => {
    const mutationOptions = getPostUserInformationsMutationOptions(options)

    return useMutation(mutationOptions)
}
