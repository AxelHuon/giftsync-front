/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * gift-sync-back-end
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query'
import type {
    CreateRoomRequestApiDTO,
    EditRoomRequestApiDTO,
    ErrorResponseApiDTO,
    GetRoomOfUserResponseApiDTO,
    InviteUserRequestApiDTO,
    InviteUsers200,
    JoinRoomRequestApiDTO,
    JoinRoomResponseApiDTO,
    RoomAttributesApiDTO,
} from './Api.schemas'
import { customInstance } from '../customInstance'
import type { ErrorType, BodyType } from '../customInstance'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const createRoom = (
    createRoomRequestApiDTO: BodyType<CreateRoomRequestApiDTO>,
    options?: SecondParameter<typeof customInstance>
) => {
    return customInstance<RoomAttributesApiDTO>(
        {
            url: `/room/create`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: createRoomRequestApiDTO,
        },
        options
    )
}

export const getCreateRoomMutationOptions = <
    TError = ErrorType<ErrorResponseApiDTO>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createRoom>>,
        TError,
        { data: BodyType<CreateRoomRequestApiDTO> },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
    Awaited<ReturnType<typeof createRoom>>,
    TError,
    { data: BodyType<CreateRoomRequestApiDTO> },
    TContext
> => {
    const { mutation: mutationOptions, request: requestOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createRoom>>,
        { data: BodyType<CreateRoomRequestApiDTO> }
    > = (props) => {
        const { data } = props ?? {}

        return createRoom(data, requestOptions)
    }

    return { mutationFn, ...mutationOptions }
}

export type CreateRoomMutationResult = NonNullable<
    Awaited<ReturnType<typeof createRoom>>
>
export type CreateRoomMutationBody = BodyType<CreateRoomRequestApiDTO>
export type CreateRoomMutationError = ErrorType<ErrorResponseApiDTO>

export const useCreateRoom = <
    TError = ErrorType<ErrorResponseApiDTO>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createRoom>>,
        TError,
        { data: BodyType<CreateRoomRequestApiDTO> },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
    Awaited<ReturnType<typeof createRoom>>,
    TError,
    { data: BodyType<CreateRoomRequestApiDTO> },
    TContext
> => {
    const mutationOptions = getCreateRoomMutationOptions(options)

    return useMutation(mutationOptions)
}
export const inviteUsers = (
    inviteUserRequestApiDTO: BodyType<InviteUserRequestApiDTO>,
    options?: SecondParameter<typeof customInstance>
) => {
    return customInstance<InviteUsers200>(
        {
            url: `/room/invite-users`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: inviteUserRequestApiDTO,
        },
        options
    )
}

export const getInviteUsersMutationOptions = <
    TError = ErrorType<ErrorResponseApiDTO>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof inviteUsers>>,
        TError,
        { data: BodyType<InviteUserRequestApiDTO> },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
    Awaited<ReturnType<typeof inviteUsers>>,
    TError,
    { data: BodyType<InviteUserRequestApiDTO> },
    TContext
> => {
    const { mutation: mutationOptions, request: requestOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof inviteUsers>>,
        { data: BodyType<InviteUserRequestApiDTO> }
    > = (props) => {
        const { data } = props ?? {}

        return inviteUsers(data, requestOptions)
    }

    return { mutationFn, ...mutationOptions }
}

export type InviteUsersMutationResult = NonNullable<
    Awaited<ReturnType<typeof inviteUsers>>
>
export type InviteUsersMutationBody = BodyType<InviteUserRequestApiDTO>
export type InviteUsersMutationError = ErrorType<ErrorResponseApiDTO>

export const useInviteUsers = <
    TError = ErrorType<ErrorResponseApiDTO>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof inviteUsers>>,
        TError,
        { data: BodyType<InviteUserRequestApiDTO> },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
    Awaited<ReturnType<typeof inviteUsers>>,
    TError,
    { data: BodyType<InviteUserRequestApiDTO> },
    TContext
> => {
    const mutationOptions = getInviteUsersMutationOptions(options)

    return useMutation(mutationOptions)
}
export const joinRoom = (
    token: string,
    joinRoomRequestApiDTO: BodyType<JoinRoomRequestApiDTO>,
    options?: SecondParameter<typeof customInstance>
) => {
    return customInstance<JoinRoomResponseApiDTO>(
        {
            url: `/room/join/${token}`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: joinRoomRequestApiDTO,
        },
        options
    )
}

export const getJoinRoomMutationOptions = <
    TError = ErrorType<ErrorResponseApiDTO>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof joinRoom>>,
        TError,
        { token: string; data: BodyType<JoinRoomRequestApiDTO> },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
    Awaited<ReturnType<typeof joinRoom>>,
    TError,
    { token: string; data: BodyType<JoinRoomRequestApiDTO> },
    TContext
> => {
    const { mutation: mutationOptions, request: requestOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof joinRoom>>,
        { token: string; data: BodyType<JoinRoomRequestApiDTO> }
    > = (props) => {
        const { token, data } = props ?? {}

        return joinRoom(token, data, requestOptions)
    }

    return { mutationFn, ...mutationOptions }
}

export type JoinRoomMutationResult = NonNullable<
    Awaited<ReturnType<typeof joinRoom>>
>
export type JoinRoomMutationBody = BodyType<JoinRoomRequestApiDTO>
export type JoinRoomMutationError = ErrorType<ErrorResponseApiDTO>

export const useJoinRoom = <
    TError = ErrorType<ErrorResponseApiDTO>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof joinRoom>>,
        TError,
        { token: string; data: BodyType<JoinRoomRequestApiDTO> },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
    Awaited<ReturnType<typeof joinRoom>>,
    TError,
    { token: string; data: BodyType<JoinRoomRequestApiDTO> },
    TContext
> => {
    const mutationOptions = getJoinRoomMutationOptions(options)

    return useMutation(mutationOptions)
}
export const deleteRoom = (
    roomId: string,
    options?: SecondParameter<typeof customInstance>
) => {
    return customInstance<RoomAttributesApiDTO>(
        { url: `/room/delete/${roomId}`, method: 'DELETE' },
        options
    )
}

export const getDeleteRoomMutationOptions = <
    TError = ErrorType<ErrorResponseApiDTO>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteRoom>>,
        TError,
        { roomId: string },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteRoom>>,
    TError,
    { roomId: string },
    TContext
> => {
    const { mutation: mutationOptions, request: requestOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteRoom>>,
        { roomId: string }
    > = (props) => {
        const { roomId } = props ?? {}

        return deleteRoom(roomId, requestOptions)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteRoomMutationResult = NonNullable<
    Awaited<ReturnType<typeof deleteRoom>>
>

export type DeleteRoomMutationError = ErrorType<ErrorResponseApiDTO>

export const useDeleteRoom = <
    TError = ErrorType<ErrorResponseApiDTO>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteRoom>>,
        TError,
        { roomId: string },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
    Awaited<ReturnType<typeof deleteRoom>>,
    TError,
    { roomId: string },
    TContext
> => {
    const mutationOptions = getDeleteRoomMutationOptions(options)

    return useMutation(mutationOptions)
}
export const putRoom = (
    roomId: string,
    editRoomRequestApiDTO: BodyType<EditRoomRequestApiDTO>,
    options?: SecondParameter<typeof customInstance>
) => {
    return customInstance<RoomAttributesApiDTO>(
        {
            url: `/room/update/${roomId}`,
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            data: editRoomRequestApiDTO,
        },
        options
    )
}

export const getPutRoomMutationOptions = <
    TError = ErrorType<ErrorResponseApiDTO>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putRoom>>,
        TError,
        { roomId: string; data: BodyType<EditRoomRequestApiDTO> },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
    Awaited<ReturnType<typeof putRoom>>,
    TError,
    { roomId: string; data: BodyType<EditRoomRequestApiDTO> },
    TContext
> => {
    const { mutation: mutationOptions, request: requestOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putRoom>>,
        { roomId: string; data: BodyType<EditRoomRequestApiDTO> }
    > = (props) => {
        const { roomId, data } = props ?? {}

        return putRoom(roomId, data, requestOptions)
    }

    return { mutationFn, ...mutationOptions }
}

export type PutRoomMutationResult = NonNullable<
    Awaited<ReturnType<typeof putRoom>>
>
export type PutRoomMutationBody = BodyType<EditRoomRequestApiDTO>
export type PutRoomMutationError = ErrorType<ErrorResponseApiDTO>

export const usePutRoom = <
    TError = ErrorType<ErrorResponseApiDTO>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putRoom>>,
        TError,
        { roomId: string; data: BodyType<EditRoomRequestApiDTO> },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
    Awaited<ReturnType<typeof putRoom>>,
    TError,
    { roomId: string; data: BodyType<EditRoomRequestApiDTO> },
    TContext
> => {
    const mutationOptions = getPutRoomMutationOptions(options)

    return useMutation(mutationOptions)
}
export const deleteUserFromARomm = (
    roomId: string,
    userId: string,
    options?: SecondParameter<typeof customInstance>
) => {
    return customInstance<RoomAttributesApiDTO>(
        { url: `/room/delete-user/${roomId}/${userId}`, method: 'DELETE' },
        options
    )
}

export const getDeleteUserFromARommMutationOptions = <
    TError = ErrorType<ErrorResponseApiDTO>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteUserFromARomm>>,
        TError,
        { roomId: string; userId: string },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteUserFromARomm>>,
    TError,
    { roomId: string; userId: string },
    TContext
> => {
    const { mutation: mutationOptions, request: requestOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteUserFromARomm>>,
        { roomId: string; userId: string }
    > = (props) => {
        const { roomId, userId } = props ?? {}

        return deleteUserFromARomm(roomId, userId, requestOptions)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteUserFromARommMutationResult = NonNullable<
    Awaited<ReturnType<typeof deleteUserFromARomm>>
>

export type DeleteUserFromARommMutationError = ErrorType<ErrorResponseApiDTO>

export const useDeleteUserFromARomm = <
    TError = ErrorType<ErrorResponseApiDTO>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteUserFromARomm>>,
        TError,
        { roomId: string; userId: string },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
    Awaited<ReturnType<typeof deleteUserFromARomm>>,
    TError,
    { roomId: string; userId: string },
    TContext
> => {
    const mutationOptions = getDeleteUserFromARommMutationOptions(options)

    return useMutation(mutationOptions)
}
export const getRoomById = (
    roomSlug: string,
    options?: SecondParameter<typeof customInstance>,
    signal?: AbortSignal
) => {
    return customInstance<GetRoomOfUserResponseApiDTO>(
        { url: `/room/${roomSlug}`, method: 'GET', signal },
        options
    )
}

export const getGetRoomByIdQueryKey = (roomSlug: string) => {
    return [`/room/${roomSlug}`] as const
}

export const getGetRoomByIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getRoomById>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(
    roomSlug: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRoomById>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    }
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetRoomByIdQueryKey(roomSlug)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoomById>>> = ({
        signal,
    }) => getRoomById(roomSlug, requestOptions, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!roomSlug,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getRoomById>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetRoomByIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getRoomById>>
>
export type GetRoomByIdQueryError = ErrorType<ErrorResponseApiDTO>

export function useGetRoomById<
    TData = Awaited<ReturnType<typeof getRoomById>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(
    roomSlug: string,
    options: {
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRoomById>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getRoomById>>,
                    TError,
                    TData
                >,
                'initialData'
            >
        request?: SecondParameter<typeof customInstance>
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetRoomById<
    TData = Awaited<ReturnType<typeof getRoomById>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(
    roomSlug: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRoomById>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getRoomById>>,
                    TError,
                    TData
                >,
                'initialData'
            >
        request?: SecondParameter<typeof customInstance>
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetRoomById<
    TData = Awaited<ReturnType<typeof getRoomById>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(
    roomSlug: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRoomById>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetRoomById<
    TData = Awaited<ReturnType<typeof getRoomById>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(
    roomSlug: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRoomById>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetRoomByIdQueryOptions(roomSlug, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

export const getRoomByOfUser = (
    options?: SecondParameter<typeof customInstance>,
    signal?: AbortSignal
) => {
    return customInstance<GetRoomOfUserResponseApiDTO[]>(
        { url: `/room`, method: 'GET', signal },
        options
    )
}

export const getGetRoomByOfUserQueryKey = () => {
    return [`/room`] as const
}

export const getGetRoomByOfUserQueryOptions = <
    TData = Awaited<ReturnType<typeof getRoomByOfUser>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getRoomByOfUser>>,
            TError,
            TData
        >
    >
    request?: SecondParameter<typeof customInstance>
}) => {
    const { query: queryOptions, request: requestOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetRoomByOfUserQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getRoomByOfUser>>
    > = ({ signal }) => getRoomByOfUser(requestOptions, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getRoomByOfUser>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetRoomByOfUserQueryResult = NonNullable<
    Awaited<ReturnType<typeof getRoomByOfUser>>
>
export type GetRoomByOfUserQueryError = ErrorType<ErrorResponseApiDTO>

export function useGetRoomByOfUser<
    TData = Awaited<ReturnType<typeof getRoomByOfUser>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(options: {
    query: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getRoomByOfUser>>,
            TError,
            TData
        >
    > &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof getRoomByOfUser>>,
                TError,
                TData
            >,
            'initialData'
        >
    request?: SecondParameter<typeof customInstance>
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetRoomByOfUser<
    TData = Awaited<ReturnType<typeof getRoomByOfUser>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getRoomByOfUser>>,
            TError,
            TData
        >
    > &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof getRoomByOfUser>>,
                TError,
                TData
            >,
            'initialData'
        >
    request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetRoomByOfUser<
    TData = Awaited<ReturnType<typeof getRoomByOfUser>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getRoomByOfUser>>,
            TError,
            TData
        >
    >
    request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetRoomByOfUser<
    TData = Awaited<ReturnType<typeof getRoomByOfUser>>,
    TError = ErrorType<ErrorResponseApiDTO>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getRoomByOfUser>>,
            TError,
            TData
        >
    >
    request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetRoomByOfUserQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}
